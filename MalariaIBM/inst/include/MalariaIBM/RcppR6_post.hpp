// Generated by RcppR6 (0.2.4): do not edit by hand
#ifndef _MALARIAIBM_RCPPR6_POST_HPP_
#define _MALARIAIBM_RCPPR6_POST_HPP_

#include <Rcpp.h>
#include <MalariaIBM/RcppR6_support.hpp>

namespace MalariaIBM {
namespace RcppR6 {
namespace traits {
template <> inline std::string   class_name_r<MalariaIBM::test >() {return "test";}
template <> inline std::string   package_name<MalariaIBM::test >() {return "MalariaIBM";}
template <> inline std::string generator_name<MalariaIBM::test >() {return ".R6_test";}
}
}
}

namespace Rcpp {
template <typename T>
SEXP wrap(const MalariaIBM::RcppR6::RcppR6<T>& x) {
  return x.to_R6();
}

namespace traits {
template <typename T>
class Exporter<MalariaIBM::RcppR6::RcppR6<T> > {
public:
  Exporter(SEXP x) : obj(MalariaIBM::RcppR6::RcppR6<T>(x)) {}
  inline MalariaIBM::RcppR6::RcppR6<T> get() { return obj; }
private:
  MalariaIBM::RcppR6::RcppR6<T> obj;
};
}

template <> inline SEXP wrap(const MalariaIBM::test& x) {
  return wrap(MalariaIBM::RcppR6::RcppR6<MalariaIBM::test>(x));
}
template <> inline MalariaIBM::test as(SEXP x) {
  return *(MalariaIBM::RcppR6::RcppR6<MalariaIBM::test>(x));
}
}

#endif
